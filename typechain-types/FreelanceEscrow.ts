/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FreelanceEscrow {
  export type JobStruct = {
    client: AddressLike;
    freelancer: AddressLike;
    amount: BigNumberish;
    state: BigNumberish;
    createdAt: BigNumberish;
  };

  export type JobStructOutput = [
    client: string,
    freelancer: string,
    amount: bigint,
    state: bigint,
    createdAt: bigint
  ] & {
    client: string;
    freelancer: string;
    amount: bigint;
    state: bigint;
    createdAt: bigint;
  };
}

export interface FreelanceEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createJob"
      | "getJob"
      | "jobs"
      | "owner"
      | "refundClient"
      | "releasePayment"
      | "renounceOwnership"
      | "submitWork"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "JobCreated"
      | "JobRefunded"
      | "OwnershipTransferred"
      | "PaymentReleased"
      | "WorkSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createJob",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundClient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releasePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitWork",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace JobCreatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    client: AddressLike,
    freelancer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    client: string,
    freelancer: string,
    amount: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    client: string;
    freelancer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobRefundedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    client: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, client: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    client: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReleasedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    freelancer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, freelancer: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    freelancer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkSubmittedEvent {
  export type InputTuple = [jobId: BigNumberish, freelancer: AddressLike];
  export type OutputTuple = [jobId: bigint, freelancer: string];
  export interface OutputObject {
    jobId: bigint;
    freelancer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FreelanceEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): FreelanceEscrow;
  waitForDeployment(): Promise<this>;

  interface: FreelanceEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createJob: TypedContractMethod<
    [jobId: BigNumberish, freelancer: AddressLike],
    [void],
    "payable"
  >;

  getJob: TypedContractMethod<
    [jobId: BigNumberish],
    [FreelanceEscrow.JobStructOutput],
    "view"
  >;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        client: string;
        freelancer: string;
        amount: bigint;
        state: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  refundClient: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  releasePayment: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitWork: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createJob"
  ): TypedContractMethod<
    [jobId: BigNumberish, freelancer: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getJob"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [FreelanceEscrow.JobStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        client: string;
        freelancer: string;
        amount: bigint;
        state: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refundClient"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releasePayment"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitWork"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "JobCreated"
  ): TypedContractEvent<
    JobCreatedEvent.InputTuple,
    JobCreatedEvent.OutputTuple,
    JobCreatedEvent.OutputObject
  >;
  getEvent(
    key: "JobRefunded"
  ): TypedContractEvent<
    JobRefundedEvent.InputTuple,
    JobRefundedEvent.OutputTuple,
    JobRefundedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReleased"
  ): TypedContractEvent<
    PaymentReleasedEvent.InputTuple,
    PaymentReleasedEvent.OutputTuple,
    PaymentReleasedEvent.OutputObject
  >;
  getEvent(
    key: "WorkSubmitted"
  ): TypedContractEvent<
    WorkSubmittedEvent.InputTuple,
    WorkSubmittedEvent.OutputTuple,
    WorkSubmittedEvent.OutputObject
  >;

  filters: {
    "JobCreated(uint256,address,address,uint256)": TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;
    JobCreated: TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;

    "JobRefunded(uint256,address,uint256)": TypedContractEvent<
      JobRefundedEvent.InputTuple,
      JobRefundedEvent.OutputTuple,
      JobRefundedEvent.OutputObject
    >;
    JobRefunded: TypedContractEvent<
      JobRefundedEvent.InputTuple,
      JobRefundedEvent.OutputTuple,
      JobRefundedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentReleased(uint256,address,uint256)": TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
    PaymentReleased: TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;

    "WorkSubmitted(uint256,address)": TypedContractEvent<
      WorkSubmittedEvent.InputTuple,
      WorkSubmittedEvent.OutputTuple,
      WorkSubmittedEvent.OutputObject
    >;
    WorkSubmitted: TypedContractEvent<
      WorkSubmittedEvent.InputTuple,
      WorkSubmittedEvent.OutputTuple,
      WorkSubmittedEvent.OutputObject
    >;
  };
}
